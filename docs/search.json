[
  {
    "objectID": "learn.html",
    "href": "learn.html",
    "title": "Learn mrgsolve ",
    "section": "",
    "text": "Introduction to mrgsolve\n\nPresented at the University of Minnesota Pharmacometrics Summer School, July 2019\nURL: https://github.com/kylebaron/mpss-mrgsolve\n\nIntegrating the R Package mrgsolve With Available Optimization Routines for Parameter Estimation With PK, PK-PD and QSP Models\n\nPresent at the University at Buffalo CDSE Days, April 2019\nURL: https://github.com/metrumresearchgroup/ub-cdse-2019\n\nIntroduction to mrgsolve\n\nPresented at PAGE in June, 2018\nURL: https://github.com/metrumresearchgroup/page-2018-mrgsolve\n\nCase studies with mrgsolve: PBPK and QSP model implementation and utilization in R\n\nPresented at University at Buffalo CDSE Days, April 2018\nPresented at University of Florida, April 2017\nURL: https://github.com/metrumresearchgroup/pbpk-qsp-mrgsolve\n\nModel Visualization Tutorial\n\nPresented in Washington, DC March 2017\nURL: https://github.com/metrumresearchgroup/model-vis-tutorial\n\nR as a single‐step platform for PK/PD and PBPK/QSP M&S: integration of model estimation, optimization, simulation, and reporting\n\nPresented at ACoP 8 2017\nURL: https://github.com/metrumresearchgroup/lvl2-workshop\n\n\n\n\n\n\n\n\nIntroduction to mrgsolve playlist\nPBPK and QSP model implementation and utilization in R part 1 and part 2\nIntroduction to mrgsolve video from 2016 ISoP Study Group"
  },
  {
    "objectID": "learn.html#course-and-tutorial-repositories",
    "href": "learn.html#course-and-tutorial-repositories",
    "title": "Learn mrgsolve ",
    "section": "",
    "text": "Introduction to mrgsolve\n\nPresented at the University of Minnesota Pharmacometrics Summer School, July 2019\nURL: https://github.com/kylebaron/mpss-mrgsolve\n\nIntegrating the R Package mrgsolve With Available Optimization Routines for Parameter Estimation With PK, PK-PD and QSP Models\n\nPresent at the University at Buffalo CDSE Days, April 2019\nURL: https://github.com/metrumresearchgroup/ub-cdse-2019\n\nIntroduction to mrgsolve\n\nPresented at PAGE in June, 2018\nURL: https://github.com/metrumresearchgroup/page-2018-mrgsolve\n\nCase studies with mrgsolve: PBPK and QSP model implementation and utilization in R\n\nPresented at University at Buffalo CDSE Days, April 2018\nPresented at University of Florida, April 2017\nURL: https://github.com/metrumresearchgroup/pbpk-qsp-mrgsolve\n\nModel Visualization Tutorial\n\nPresented in Washington, DC March 2017\nURL: https://github.com/metrumresearchgroup/model-vis-tutorial\n\nR as a single‐step platform for PK/PD and PBPK/QSP M&S: integration of model estimation, optimization, simulation, and reporting\n\nPresented at ACoP 8 2017\nURL: https://github.com/metrumresearchgroup/lvl2-workshop"
  },
  {
    "objectID": "learn.html#youtube",
    "href": "learn.html#youtube",
    "title": "Learn mrgsolve ",
    "section": "",
    "text": "Introduction to mrgsolve playlist\nPBPK and QSP model implementation and utilization in R part 1 and part 2\nIntroduction to mrgsolve video from 2016 ISoP Study Group"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simulate from PKPD & QSP models in R ",
    "section": "",
    "text": "Welcome to the online home for mrgsolve. mrgsolve is an R package for simulation from hierarchical, ordinary differential equation (ODE) based models typically employed in drug development. mrgsolve has been used for a wide variety of model applications, including pharmacokinetics (PK), pharmacokinetics/pharmacodynamics (PK/PD), physiologically-based pharmacokinetic (PBPK) modeling, and quantitative systems pharmacology. This site functions as a portal to all of the online resources that are available to help you learn mrgsolve and use it well to create useful simulations.\n\n\n\nmrgsolve is distributed as a package for R and utilizes an ODE-solver from ODEPACK which is freely-available in the public domain. We develop mrgsolve on github, with input and contributions from the pharmacometrics modeling and simulation community. We welcome feature requests and bug reports on the GitHub site issue tracker. We also welcome questions about your model or simulation code on the discussion board.\n\n\n\n\n\nUser Guide: In-depth description and discussion about how mrgsolve works, including code block reference.\nPackage documentation: This is the pkgdown site for mrgsolve, including usage vignettes.\nR documentation: All mrgsolve documentation that you would find in the R help system.\nDoxygen documentation: How to use some of the provided C++ functions in your model.\nVignettes: Package vignettes.\nGallery: A GitHub repository of short, focused how-to vignettes.\nDynamic dosing resources: this is a repository of examples illustrating how to dynamically. implement dosing regimens or other modeled events from inside your model code. Included is a vignette with ten fully-worked examples with source code and outputs.\nQuick hit demos: Features that you might have a hard time finding in other documentation.\n\n\n\n\n\n\nBenchmarks: We simulate data for certain scenarios from both NONMEM and mrgsolve and compare the outputs. All the code needed to run or confirm the outputs is included in the git repository. mrgsolve does not match NONMEM in every way; but there is substantial overlap so that a wide variety of models estimated in NONMEM can be simulated in mrgsolve.\nGitHub Page: Browse source code, find useful examples, get help installing, report issues\nmrgsolve home on CRAN\nMetrum Research Group: Our main website\n\n\n\n\n\nThe following is a simple example to illustrate the basics of how mrgsolve works. You can find more examples and usage vignettes in the links above or in the “Help Topics” menu in the nav bar at the top of the mrgsolve.github.io main page.\n\nlibrary(mrgsolve)\n\nFirst, a model object is created. As an introduction, we will use a pre-coded model from an internal library.\n\nmod &lt;- modlib(\"1005\")\n\nAn overview about this model\n\nmod\n\n. \n. \n. -----------------  source: 1005.cpp  -----------------\n. \n.   project: /Users/kyleb/ren...gsolve/models\n.   shared object: 1005-so-5a2e44fef2e0 \n. \n.   time:          start: 0 end: 24 delta: 1\n.                  add: &lt;none&gt;\n. \n.   compartments:  GUT CENT PERIPH [3]\n.   parameters:    SEX WT THETA1 THETA2 THETA3 THETA4\n.                  THETA5 THETA6 THETA7 [9]\n.   captures:      CL Q V2 V3 KA ETA_1 ETA_2 ETA_3 IPRED [9]\n.   omega:         3x3 \n.   sigma:         2x2 \n. \n.   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n. ------------------------------------------------------\n\n\nNext, let’s create an intervention for the model. We do this with an event object.\n\ne &lt;- ev(amt = 1000, ii = 24, addl = 3) %&gt;% ev_rep(1:10)\ne\n\n   ID time  amt ii addl cmt evid\n1   1    0 1000 24    3   1    1\n2   2    0 1000 24    3   1    1\n3   3    0 1000 24    3   1    1\n4   4    0 1000 24    3   1    1\n5   5    0 1000 24    3   1    1\n6   6    0 1000 24    3   1    1\n7   7    0 1000 24    3   1    1\n8   8    0 1000 24    3   1    1\n9   9    0 1000 24    3   1    1\n10 10    0 1000 24    3   1    1\n\n\nNow, we simulate with our model object (mod) and the event object (e)\n\nset.seed(1234)\nout &lt;- \n  mod %&gt;% \n  ev(e) %&gt;% \n  mrgsim(end = 240, delta = 0.1)\nout\n\n. Model:  1005 \n. Dim:    24020 x 14 \n. Time:   0 to 240 \n. ID:     10 \n.     ID time    GUT   CENT  PERIPH   CL     Q    V2    V3      KA  ETA_1  ETA_2\n. 1:   1  0.0    0.0  0.000 0.00000 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 2:   1  0.0 1000.0  0.000 0.00000 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 3:   1  0.1  993.6  6.223 0.04145 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 4:   1  0.2  987.2 12.044 0.16204 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 5:   1  0.3  980.9 17.488 0.35642 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 6:   1  0.4  974.6 22.577 0.61952 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 7:   1  0.5  968.4 27.332 0.94662 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 8:   1  0.6  962.1 31.772 1.33324 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n.      ETA_3  IPRED\n. 1:  -0.105 0.0000\n. 2:  -0.105 0.0000\n. 3:  -0.105 0.2362\n. 4:  -0.105 0.4572\n. 5:  -0.105 0.6638\n. 6:  -0.105 0.8570\n. 7:  -0.105 1.0375\n. 8:  -0.105 1.2061\n\n\nAnd plot\n\nplot(out, IPRED ~ time)  \n\n\n\n\n\n\n\n\nThe source code for this model:\n\n[ PROB ]\n1005 phase1 2 CMT like 1004 but diff. initial on V3\n\nRun \nfile.show(system.file(\"nonmem\", \"1005\", \"1005.ctl\", package = \"mrgsolve\")) \nfor equivalent NONMEM control stream. \n\n[ PKMODEL ] cmt = \"GUT CENT PERIPH\", depot = TRUE\n\n[ INPUT ] SEX = 0, WT = 70\n\n[ NMXML ] \nproject = system.file(\"nonmem\", package = \"mrgsolve\")\nrun = \"@cppstem\"\n\n[ PK ] \ndouble CL = THETA(1)*exp(ETA(1)) * pow(THETA(6),SEX) * pow(WT/70.0,THETA(7));\ndouble V2 = THETA(2)*exp(ETA(2));\ndouble KA = THETA(3)*exp(ETA(3));\ndouble Q  = THETA(4);\ndouble V3 = THETA(5);\ndouble S2 = V2;\n\n[ ERROR ] \ndouble F = CENT/S2;\ndouble Y = F*(1+EPS(1)) + EPS(2); \ndouble IPRED = F; \n\n[ CAPTURE ] \nCL Q V2 V3 KA ETA(1) ETA(2) ETA(3) IPRED"
  },
  {
    "objectID": "index.html#mrgsolve-is-free-open-source-software",
    "href": "index.html#mrgsolve-is-free-open-source-software",
    "title": "Simulate from PKPD & QSP models in R ",
    "section": "",
    "text": "mrgsolve is distributed as a package for R and utilizes an ODE-solver from ODEPACK which is freely-available in the public domain. We develop mrgsolve on github, with input and contributions from the pharmacometrics modeling and simulation community. We welcome feature requests and bug reports on the GitHub site issue tracker. We also welcome questions about your model or simulation code on the discussion board."
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "Simulate from PKPD & QSP models in R ",
    "section": "",
    "text": "User Guide: In-depth description and discussion about how mrgsolve works, including code block reference.\nPackage documentation: This is the pkgdown site for mrgsolve, including usage vignettes.\nR documentation: All mrgsolve documentation that you would find in the R help system.\nDoxygen documentation: How to use some of the provided C++ functions in your model.\nVignettes: Package vignettes.\nGallery: A GitHub repository of short, focused how-to vignettes.\nDynamic dosing resources: this is a repository of examples illustrating how to dynamically. implement dosing regimens or other modeled events from inside your model code. Included is a vignette with ten fully-worked examples with source code and outputs.\nQuick hit demos: Features that you might have a hard time finding in other documentation."
  },
  {
    "objectID": "index.html#links-and-resources",
    "href": "index.html#links-and-resources",
    "title": "Simulate from PKPD & QSP models in R ",
    "section": "",
    "text": "Benchmarks: We simulate data for certain scenarios from both NONMEM and mrgsolve and compare the outputs. All the code needed to run or confirm the outputs is included in the git repository. mrgsolve does not match NONMEM in every way; but there is substantial overlap so that a wide variety of models estimated in NONMEM can be simulated in mrgsolve.\nGitHub Page: Browse source code, find useful examples, get help installing, report issues\nmrgsolve home on CRAN\nMetrum Research Group: Our main website"
  },
  {
    "objectID": "index.html#an-example",
    "href": "index.html#an-example",
    "title": "Simulate from PKPD & QSP models in R ",
    "section": "",
    "text": "The following is a simple example to illustrate the basics of how mrgsolve works. You can find more examples and usage vignettes in the links above or in the “Help Topics” menu in the nav bar at the top of the mrgsolve.github.io main page.\n\nlibrary(mrgsolve)\n\nFirst, a model object is created. As an introduction, we will use a pre-coded model from an internal library.\n\nmod &lt;- modlib(\"1005\")\n\nAn overview about this model\n\nmod\n\n. \n. \n. -----------------  source: 1005.cpp  -----------------\n. \n.   project: /Users/kyleb/ren...gsolve/models\n.   shared object: 1005-so-5a2e44fef2e0 \n. \n.   time:          start: 0 end: 24 delta: 1\n.                  add: &lt;none&gt;\n. \n.   compartments:  GUT CENT PERIPH [3]\n.   parameters:    SEX WT THETA1 THETA2 THETA3 THETA4\n.                  THETA5 THETA6 THETA7 [9]\n.   captures:      CL Q V2 V3 KA ETA_1 ETA_2 ETA_3 IPRED [9]\n.   omega:         3x3 \n.   sigma:         2x2 \n. \n.   solver:        atol: 1e-08 rtol: 1e-08 maxsteps: 20k\n. ------------------------------------------------------\n\n\nNext, let’s create an intervention for the model. We do this with an event object.\n\ne &lt;- ev(amt = 1000, ii = 24, addl = 3) %&gt;% ev_rep(1:10)\ne\n\n   ID time  amt ii addl cmt evid\n1   1    0 1000 24    3   1    1\n2   2    0 1000 24    3   1    1\n3   3    0 1000 24    3   1    1\n4   4    0 1000 24    3   1    1\n5   5    0 1000 24    3   1    1\n6   6    0 1000 24    3   1    1\n7   7    0 1000 24    3   1    1\n8   8    0 1000 24    3   1    1\n9   9    0 1000 24    3   1    1\n10 10    0 1000 24    3   1    1\n\n\nNow, we simulate with our model object (mod) and the event object (e)\n\nset.seed(1234)\nout &lt;- \n  mod %&gt;% \n  ev(e) %&gt;% \n  mrgsim(end = 240, delta = 0.1)\nout\n\n. Model:  1005 \n. Dim:    24020 x 14 \n. Time:   0 to 240 \n. ID:     10 \n.     ID time    GUT   CENT  PERIPH   CL     Q    V2    V3      KA  ETA_1  ETA_2\n. 1:   1  0.0    0.0  0.000 0.00000 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 2:   1  0.0 1000.0  0.000 0.00000 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 3:   1  0.1  993.6  6.223 0.04145 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 4:   1  0.2  987.2 12.044 0.16204 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 5:   1  0.3  980.9 17.488 0.35642 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 6:   1  0.4  974.6 22.577 0.61952 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 7:   1  0.5  968.4 27.332 0.94662 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n. 8:   1  0.6  962.1 31.772 1.33324 12.3 3.475 26.34 113.3 0.06432 0.2572 0.1449\n.      ETA_3  IPRED\n. 1:  -0.105 0.0000\n. 2:  -0.105 0.0000\n. 3:  -0.105 0.2362\n. 4:  -0.105 0.4572\n. 5:  -0.105 0.6638\n. 6:  -0.105 0.8570\n. 7:  -0.105 1.0375\n. 8:  -0.105 1.2061\n\n\nAnd plot\n\nplot(out, IPRED ~ time)  \n\n\n\n\n\n\n\n\nThe source code for this model:\n\n[ PROB ]\n1005 phase1 2 CMT like 1004 but diff. initial on V3\n\nRun \nfile.show(system.file(\"nonmem\", \"1005\", \"1005.ctl\", package = \"mrgsolve\")) \nfor equivalent NONMEM control stream. \n\n[ PKMODEL ] cmt = \"GUT CENT PERIPH\", depot = TRUE\n\n[ INPUT ] SEX = 0, WT = 70\n\n[ NMXML ] \nproject = system.file(\"nonmem\", package = \"mrgsolve\")\nrun = \"@cppstem\"\n\n[ PK ] \ndouble CL = THETA(1)*exp(ETA(1)) * pow(THETA(6),SEX) * pow(WT/70.0,THETA(7));\ndouble V2 = THETA(2)*exp(ETA(2));\ndouble KA = THETA(3)*exp(ETA(3));\ndouble Q  = THETA(4);\ndouble V3 = THETA(5);\ndouble S2 = V2;\n\n[ ERROR ] \ndouble F = CENT/S2;\ndouble Y = F*(1+EPS(1)) + EPS(2); \ndouble IPRED = F; \n\n[ CAPTURE ] \nCL Q V2 V3 KA ETA(1) ETA(2) ETA(3) IPRED"
  }
]