---
title: ""
toc: false
---

```{r,include = FALSE}
source("ref.R")
```

# <font class=mrgg>Simulate from PKPD & QSP models in R</font> <img src="MRG-Solve-Hex.png" align="right" width="150"></img>

Welcome to the online home for mrgsolve. mrgsolve is an `R` package for
simulation from hierarchical, ordinary  differential equation (ODE) based 
models typically employed in drug development. mrgsolve has been used for a 
wide variety of model applications, including pharmacokinetics (PK), 
pharmacokinetics/pharmacodynamics (PK/PD), physiologically-based pharmacokinetic
(PBPK) modeling, and quantitative systems pharmacology. This site functions as 
a portal to all of the online resources  that are available to help you learn 
mrgsolve and use it well to create useful simulations. 


<br>

## mrgsolve is free, open-source software
mrgsolve is distributed as a package for `R` and utilizes an ODE-solver from 
`ODEPACK` which is freely-available in the public domain.  We develop mrgsolve 
on [github](http://www.github.com/metrumresearchgroup/mrgsolve), with input and 
contributions from the pharmacometrics modeling and simulation community.  We 
welcome feature requests and bug reports on the GitHub site [issue
tracker](http://www.github.com/metrumresearchgroup/mrgsolve/issues). We also
welcome questions about your model or simulation code on the 
[discussion board](https://github.com/metrumresearchgroup/mrgsolve/discussions).

<br>

## Documentation
* [User Guide](http://mrgsolve.org/user_guide): In-depth description and 
  discussion about how mrgsolve works, including code block reference.
* [Package documentation](http://mrgsolve.org/docs/): This is the 
  pkgdown site for mrgsolve, including usage vignettes.
* [R documentation](http://mrgsolve.org/docs/reference): All mrgsolve 
  documentation that you would find in the `R` help system.
* [Doxygen documentation](http://mrgsolve.org/doxygen): How to use some 
  of the provided C++ functions in your model.
* [Vignettes](http://mrgsolve.org/vignettes): Package vignettes.
* [Gallery](http://github.com/mrgsolve/gallery): A GitHub repository of short, 
  focused how-to vignettes.
* [Dynamic dosing](https://github.com/mrgsolve/dynamic-dosing) resources: 
  this is a repository of examples illustrating how to dynamically. 
  implement dosing regimens or other modeled events from inside your model code. 
  Included is a [vignette](http://mrgsolve.org/dynamic-dosing) with ten 
  fully-worked examples with source code and outputs.
* [Quick hit demos](http://mrgsolve.org/vignettes/quick.html): Features
  that you might have a hard time finding in other documentation.

<br>

## Links and Resources
* [Benchmarks](http://github.com/mrgsolve/nmtests#readme): We simulate data for 
  certain scenarios from both NONMEM and mrgsolve and compare the outputs. 
  All the code needed to run or confirm the outputs is included in the git 
  repository. mrgsolve does not match NONMEM in every way; but there is 
  substantial overlap so that a wide variety of models estimated in NONMEM
  can be simulated in mrgsolve. 
* [GitHub Page](http://www.github.com/metrumresearchgroup/mrgsolve): Browse 
  source code, find useful examples, get help installing, report issues
* mrgsolve home on [CRAN](https://CRAN.R-project.org/package=mrgsolve)
* [Metrum Research Group](http://metrumrg.com): Our main website

<hr>

## An example

The following is a simple example to illustrate the basics of how mrgsolve 
works.  You can find more examples and usage vignettes in the links above or in 
the "Help Topics" menu in the nav bar at the top of the
[mrgsolve.github.io](https://mrgsolve.github.io) main page.



```{r,message=FALSE}
#| message: false
#| warning: false
library(mrgsolve)
```

First, a model object is created.  As an introduction, we will use a pre-coded
model from an internal library.

```{r,message=FALSE}
mod <- modlib("1005")
```

An overview about this model

```{r, comment = '.'}
mod
```

Next, let's create an intervention for the model.  We do this with an event
object.

```{r}
e <- ev(amt = 1000, ii = 24, addl = 3) %>% ev_rep(1:10)
e
```

Now, we simulate with our model object (`mod`) and the event object (`e`)

```{r, comment = '.'}
set.seed(1234)
out <- 
  mod %>% 
  ev(e) %>% 
  mrgsim(end = 240, delta = 0.1)
out
```

And plot

```{r}
plot(out, IPRED ~ time)  
```


The source code for this model:

```{c, eval = FALSE, comment = " ",  code = mod@code}

```
